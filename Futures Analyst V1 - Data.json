{
  "name": "Futures Analyst V1 - Data",
  "nodes": [
    {
      "parameters": {
        "url": "=https://api.mexc.com/api/v3/ticker/price",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "queryParameterArrays": "repeat",
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Current Price",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        -48
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "id": "0b9a3579-3870-408b-9060-69b3eb67c3a4"
    },
    {
      "parameters": {
        "url": "=https://api.mexc.com/api/v3/klines",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{$json.symbol}}"
            },
            {
              "name": "interval",
              "value": "={{ $json.kline.interval }}"
            },
            {
              "name": "limit",
              "value": "={{ $json.kline.limit }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "queryParameterArrays": "repeat",
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Candlestick Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        144
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "id": "37e14ce6-21e6-49db-bf43-7b4240567ae1"
    },
    {
      "parameters": {
        "numberInputs": 7
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        800,
        304
      ],
      "id": "c23ac935-21fa-4502-998b-28b0219cd9e6",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "// Convert spot symbol to contract symbol format (optimized)\nfunction toContractSymbol(symbol) {\n  if (typeof symbol !== 'string' || !symbol) return symbol;\n  \n  // Fast path for USDT pairs (most common case)\n  if (symbol.endsWith('USDT') && symbol.length > 4) {\n    return `${symbol.slice(0, -4)}_USDT`;\n  }\n  \n  // Common quote currencies (ordered by frequency)\n  const QUOTES = ['BTC','ETH','USD','BUSD','TUSD'];\n  \n  for (const quote of QUOTES) {\n    if (symbol.endsWith(quote) && symbol.length > quote.length) {\n      return `${symbol.slice(0, -quote.length)}_${quote}`;\n    }\n  }\n  \n  return symbol; // Fallback to original\n}\n\n// Get coin name (optimized to top 15 coins)\nfunction getCoinName(symbol) {\n  if (typeof symbol !== 'string' || !symbol) return 'Unknown';\n  \n  // Extract base currency from symbol\n  let base = symbol;\n  const QUOTES = ['USDT', 'USD', 'BTC', 'ETH']; // Most common quotes only\n  \n  for (const quote of QUOTES) {\n    if (symbol.endsWith(quote)) {\n      base = symbol.slice(0, -quote.length);\n      break;\n    }\n  }\n  \n  // Top 15 cryptocurrencies only (by market cap)\n  const coinNames = {\n    'BTC': 'Bitcoin',\n    'ETH': 'Ethereum',\n    'SOL': 'Solana',\n    'XRP': 'Ripple',\n    'BNB': 'Binance Coin',\n    'ADA': 'Cardano',\n    'DOGE': 'Dogecoin',\n    'AVAX': 'Avalanche',\n    'MATIC': 'Polygon',\n    'LINK': 'Chainlink',\n    'DOT': 'Polkadot',\n    'SHIB': 'Shiba Inu',\n    'LTC': 'Litecoin',\n    'UNI': 'Uniswap',\n    'ATOM': 'Cosmos'\n  };\n  \n  return coinNames[base] || base;\n}\n\n// Extract symbol (optimized)\nconst symbol = (($json.query?.symbol || $json.pathParams?.symbol || \n                $json.symbol || $json.params?.symbol || 'SOLUSDT')\n               .toUpperCase());\n\n// Generate derivatives\nconst contractSymbol = toContractSymbol(symbol);\nconst coinName = getCoinName(symbol);\n\n// Use optimized data retrieval approach\n// No need for compact/extended mode flags anymore\n\n// Generate current datetime in CET (Europe/Berlin) timezone\nconst now = new Date();\nconst cetOptions = { \n  timeZone: 'Europe/Berlin',\n  year: 'numeric', \n  month: 'short', \n  day: 'numeric',\n  hour: '2-digit', \n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false\n};\n\nconst cetDatetime = now.toLocaleString('en-US', cetOptions);\n\n  // Return parameters with optimized data limits for efficient analysis\n  return {\n    json: {\n      symbol,                      // For spot endpoints\n      contractSymbol,              // For futures endpoints\n      coinName,                    // Human-readable name\n      cetDatetime,                 // Current time in Europe/Berlin timezone\n     kline: { \n      interval: \"4h\", \n      limit: 120   // Enough for all indicators + AI context\n    },\n    depth: { \n      limit: 20    // Optimal for key liquidity zones\n    },\n    trades: { \n      limit: 500   // More recent trade flow for robust AI analysis\n    },\n    funding: { \n      pageSize: 50, // Sufficient for funding trend analysis\n      pageNum: 1\n    }\n    }\n  };\n"
      },
      "name": "Extract Symbol from Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -320,
        528
      ],
      "id": "e348ce24-1a2b-4bd5-8366-c6a6e383cc8d"
    },
    {
      "parameters": {
        "url": "=https://contract.mexc.com/api/v1/contract/funding_rate",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{$json.symbol}}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "queryParameterArrays": "brackets",
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Current Funding Rate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        336
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "id": "b6b366dc-06ce-4b86-b07d-829806e263c4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "price",
              "type": "string"
            },
            {
              "id": "cb90b273-da37-4b1e-931a-e86453413a39",
              "name": "symbol",
              "value": "={{ $json.symbol }}",
              "type": "string"
            },
            {
              "id": "fca1637b-29a6-423b-b581-d160854021f8",
              "name": "price",
              "value": "={{ $json.price }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        -48
      ],
      "id": "bcee671b-3494-437f-b39d-eef85458a6a9",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "candlestick",
              "type": "string"
            },
            {
              "id": "845213b0-4aaa-45dc-88db-227e7b5731ff",
              "name": "symbol",
              "value": "={{ $('Extract Symbol from Message').item.json.symbol }}",
              "type": "string"
            },
            {
              "id": "0855eebb-1a41-4841-9e3a-1b62d7cb1e6f",
              "name": "data",
              "value": "={{ $json}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        144
      ],
      "id": "a22e9700-20e2-4b4c-a0c3-854725839950",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "funding",
              "type": "string"
            },
            {
              "id": "0855eebb-1a41-4841-9e3a-1b62d7cb1e6f",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        336
      ],
      "id": "6e907fa7-50b8-4830-a2c0-8f45476d4ef1",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "url": "=https://contract.mexc.com/api/v1/contract/funding_rate/history",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.contractSymbol }}"
            },
            {
              "name": "page_num",
              "value": "={{ $json.funding.pageNum }}"
            },
            {
              "name": "page_size",
              "value": "={{ $json.funding.pageSize }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Historical Funding Rate",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        528
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "id": "13eb84ad-1ee5-4580-85f5-dcca12bd8ff8"
    },
    {
      "parameters": {
        "url": "=https://contract.mexc.com/api/v1/contract/detail",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.contractSymbol }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Contract Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        720
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "id": "dd393eec-e8e4-4ab2-b9b8-0bb43130ecf3"
    },
    {
      "parameters": {
        "url": "=https://api.mexc.com/api/v3/trades",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{$json.symbol}}"
            },
            {
              "name": "limit",
              "value": "={{ $json.trades.limit }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "queryParameterArrays": "brackets",
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Trades List",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        912
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 3000,
      "id": "ad59e251-8b78-4187-a397-460102881f11"
    },
    {
      "parameters": {
        "url": "=https://api.mexc.com/api/v3/depth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{$json.symbol}}"
            },
            {
              "name": "limit",
              "value": "={{ $json.depth.limit }}"
            }
          ]
        },
        "options": {
          "allowUnauthorizedCerts": true,
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "name": "Get Order Book Depth",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        352,
        1104
      ],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 3000,
      "id": "fdf67e14-eb6a-4959-ba99-2f4405409a68"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "historical-funding",
              "type": "string"
            },
            {
              "id": "0855eebb-1a41-4841-9e3a-1b62d7cb1e6f",
              "name": "data",
              "value": "={{ $json.data.resultList }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        528
      ],
      "id": "b841bb60-b411-48ff-a8e0-df84549b977c",
      "name": "Edit Fields3"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "contract-details",
              "type": "string"
            },
            {
              "id": "bb3f5b3c-f1a8-48ff-b9c7-891cb7f9c15a",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        720
      ],
      "id": "36854f4b-fffc-41aa-9e3c-123c8a8f7050",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "order-book-depth",
              "type": "string"
            },
            {
              "id": "0855eebb-1a41-4841-9e3a-1b62d7cb1e6f",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        1104
      ],
      "id": "7dae6f05-3b87-46fc-b597-674ade962647",
      "name": "Edit Fields6"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5e9ee778-5ef0-4f6e-9f46-59f09528ceb1",
              "name": "endpoint",
              "value": "trade-list",
              "type": "string"
            },
            {
              "id": "0855eebb-1a41-4841-9e3a-1b62d7cb1e6f",
              "name": "data",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        576,
        912
      ],
      "id": "4b8b5f74-5a44-4afe-b553-65729a844077",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Prepare for MongoDB - n8n Code Node\n * - Requires each merged item to have an 'endpoint' field (set by Set node or HTTP node)\n * - Fallbacks to nodeMap if not present\n * - Handles price, candlestick, and funding data formats\n * - Enhanced funding data handling with optimized symbol matching\n * - Filters funding data to only keep the relevant entry for the queried symbol\n */\n\n// Helper: Extract symbol from data, fallback to inputSymbol or 'UNKNOWN'\nfunction extractSymbol(data, inputSymbol, endpoint) {\n  // Direct symbol property\n  if (data.symbol) return data.symbol;\n  \n  // For funding data which might have data.data[0].symbol format\n  if (endpoint === 'funding' && data.data && Array.isArray(data.data) && data.data.length > 0) {\n    // Always prioritize the inputSymbol if provided\n    if (inputSymbol && inputSymbol !== 'UNKNOWN') {\n      return inputSymbol;\n    }\n    \n    // If no inputSymbol provided, use the first entry\n    const fundingSymbol = data.data[0].symbol;\n    if (fundingSymbol) {\n      // Normalize symbol format (e.g., BTC_USDT -> BTCUSDT)\n      return fundingSymbol.replace(/_([A-Z0-9]+)$/i, '$1');\n    }\n  }\n  \n  // For array data with objects containing symbol\n  if (Array.isArray(data) && data[0] && typeof data[0] === 'object' && data[0].symbol) {\n    return data[0].symbol;\n  }\n  \n  return inputSymbol || 'UNKNOWN';\n}\n\n// Helper: Extract endpoint from data or fallback to nodeMap\nfunction extractEndpoint(item, nodeMap, idx) {\n  // First check json.endpoint which is most specific\n  if (item.json && item.json.endpoint) return item.json.endpoint;\n  \n  // Then check item.endpoint (might be set by Edit node)\n  if (item.endpoint) return item.endpoint;\n  \n  // Check if this is funding data by structure\n  if (item.json && item.json.data && Array.isArray(item.json.data) && \n      item.json.data.length > 0 && item.json.data[0].fundingRate !== undefined) {\n    return 'funding';\n  }\n  \n  // Fall back to nodeMap based on position\n  if (nodeMap && nodeMap[idx]) return nodeMap[idx];\n  \n  return 'unknown';\n}\n\n// Data processors for each endpoint type\nconst dataProcessors = {\n  // Process candlestick data\n  candlestick: (data, symbol) => {\n    if (!Array.isArray(data.data)) return data;\n    \n    return {\n      openTime: data.data[0],\n      open: data.data[1],\n      high: data.data[2],\n      low: data.data[3],\n      close: data.data[4],\n      volume: data.data[5],\n      closeTime: data.data[6],\n      quoteAssetVolume: data.data[7]\n    };\n  },\n  \n  // Process price data\n  price: (data, symbol) => {\n    return data.price ? { price: data.price } : data;\n  },\n  \n  // Process contract details data\n  'contract-details': (data, symbol) => {\n    // Extract contract details from the appropriate data structure\n    const contractData = (data.success && data.data) ? data.data : \n                        (data.data && data.data.symbol) ? data.data : null;\n    \n    if (!contractData) return data;\n    \n    // Return only the essential contract details\n    return {\n      symbol: contractData.symbol,\n      displayName: contractData.displayName,\n      displayNameEn: contractData.displayNameEn,\n      baseCoin: contractData.baseCoin,\n      quoteCoin: contractData.quoteCoin,\n      contractSize: contractData.contractSize,\n      minLeverage: contractData.minLeverage,\n      maxLeverage: contractData.maxLeverage,\n      priceScale: contractData.priceScale,\n      minVol: contractData.minVol,\n      maxVol: contractData.maxVol,\n      takerFeeRate: contractData.takerFeeRate,\n      makerFeeRate: contractData.makerFeeRate,\n      maintenanceMarginRate: contractData.maintenanceMarginRate,\n      initialMarginRate: contractData.initialMarginRate,\n      liquidationFeeRate: contractData.liquidationFeeRate,\n      riskLimitCustom: contractData.riskLimitCustom\n    };\n  },\n  \n  // Process funding data\n  funding: (data, symbol) => {\n    if (!data.data || !Array.isArray(data.data)) return data;\n    \n    // Find the matching funding data entry\n    const targetSymbolData = findMatchingFundingData(data.data, symbol);\n    \n    if (targetSymbolData) {\n      return {\n        fundingRate: targetSymbolData.fundingRate,\n        maxFundingRate: targetSymbolData.maxFundingRate,\n        minFundingRate: targetSymbolData.minFundingRate,\n        collectCycle: targetSymbolData.collectCycle,\n        nextSettleTime: targetSymbolData.nextSettleTime,\n        timestamp: targetSymbolData.timestamp,\n        originalSymbol: targetSymbolData.symbol,\n        matchType: 'exact'\n      };\n    } else {\n      return {\n        fundingRate: null,\n        maxFundingRate: null,\n        minFundingRate: null,\n        noMatchFound: true,\n        queriedSymbol: symbol,\n        availableSymbols: data.data.slice(0, 3).map(item => item.symbol || 'unknown')\n      };\n    }\n  },\n  \n  // Process historical funding data\n  'historical-funding': (data, symbol) => {\n    if (!data.data) return data;\n    \n    // If data is an array of historical funding entries\n    if (Array.isArray(data.data)) {\n      // Filter entries for the specific symbol if possible\n      const relevantEntries = data.data.filter(entry => {\n        if (!entry.symbol) return false;\n        \n        // Try different symbol formats for matching\n        const entrySymbol = entry.symbol.toUpperCase();\n        const normalizedSymbol = symbol.toUpperCase();\n        const symbolWithoutQuote = normalizedSymbol.replace(/USDT$|USD$/i, '');\n        \n        return entrySymbol.includes(symbolWithoutQuote) || \n               entrySymbol.replace(/_/g, '').includes(symbolWithoutQuote);\n      });\n      \n      // Return filtered entries or original data if no matches\n      return relevantEntries.length > 0 ? { \n        entries: relevantEntries,\n        count: relevantEntries.length,\n        originalSymbol: symbol\n      } : data;\n    }\n    \n    return data;\n  },\n  \n  // Process orderbook data\n  orderbook: (data, symbol) => {\n    // Check if data has the expected orderbook structure\n    if (!data.bids || !data.asks) return data;\n    \n    // Return a clean orderbook structure\n    return {\n      bids: data.bids,\n      asks: data.asks,\n      timestamp: data.timestamp || Date.now(),\n      lastUpdateId: data.lastUpdateId\n    };\n  },\n  \n  // Process trades data\n  trades: (data, symbol) => {\n    // If data is an array of trades\n    if (Array.isArray(data)) {\n      // Return the trades with a count\n      return {\n        trades: data,\n        count: data.length,\n        timestamp: Date.now()\n      };\n    }\n    \n    // If data has a trades property that is an array\n    if (data.trades && Array.isArray(data.trades)) {\n      return {\n        trades: data.trades,\n        count: data.trades.length,\n        timestamp: data.timestamp || Date.now()\n      };\n    }\n    \n    return data;\n  }\n};\n\n// Helper: Find matching funding data entry\nfunction findMatchingFundingData(fundingDataArray, symbol) {\n  // Normalize symbol formats for matching\n  const normalizedSymbol = symbol.toUpperCase();\n  const symbolWithoutQuote = normalizedSymbol.replace(/USDT$|USD$/i, '');\n  const underscoreFormat = symbolWithoutQuote + '_' + (normalizedSymbol.includes('USDT') ? 'USDT' : 'USD');\n  \n  // Try multiple matching strategies in order of precision\n  let match = fundingDataArray.find(item => \n    item.symbol && item.symbol.toUpperCase() === underscoreFormat\n  );\n  \n  // Match by coin part if direct match fails\n  if (!match) {\n    match = fundingDataArray.find(item => {\n      if (!item.symbol) return false;\n      const itemCoin = item.symbol.split('_')[0].toUpperCase();\n      return itemCoin === symbolWithoutQuote;\n    });\n  }\n  \n  // Fuzzy match as last resort\n  if (!match && symbolWithoutQuote.length >= 2) {\n    match = fundingDataArray.find(item => {\n      if (!item.symbol) return false;\n      return item.symbol.toUpperCase().startsWith(symbolWithoutQuote);\n    });\n  }\n  \n  return match;\n}\n\n// Normalize symbol format (e.g., SOL_USDT -> SOLUSDT)\nfunction normalizeSymbol(symbol) {\n  return symbol.replace(/_/g, '');\n}\n\n// Main: Prepare MongoDB records\nfunction prepareMongoRecords(items, inputSymbol, nodeMap) {\n  let lastEndpoint = 'unknown';\n  \n  return items.map((item, idx) => {\n    const json = item.json || {};\n    \n    // Extract endpoint\n    let endpoint = extractEndpoint(item, nodeMap, idx) || json.endpoint || lastEndpoint;\n    if (endpoint && endpoint !== 'unknown') lastEndpoint = endpoint;\n    \n    // Create a copy of the data\n    let data = { ...json };\n    \n    // Extract symbol based on endpoint and data structure\n    let symbol = extractSymbol(data, inputSymbol, endpoint);\n    \n    // Remove redundant fields from data\n    delete data.endpoint;\n    delete data.symbol;\n    \n    // Process data based on endpoint type using the appropriate processor\n    if (dataProcessors[endpoint]) {\n      data = dataProcessors[endpoint](data, symbol);\n      \n      // Normalize symbol format if needed\n      if (endpoint === 'contract-details') {\n        symbol = normalizeSymbol(symbol);\n      }\n    }\n    \n    // Return the standardized MongoDB document\n    return {\n      timestamp: Date.now(),\n      symbol,\n      endpoint,\n      data\n    };\n  });\n}\n\n// n8n context\nconst inputSymbol = $json.symbol || 'UNKNOWN';\n\n// If using Merge node (order known), set nodeMap accordingly\n// The index corresponds to the position in the merged items array\nconst nodeMap = {\n  0: 'price',\n  1: 'candlestick',\n  2: 'funding',\n  3: 'contract-details',\n  4: 'historical-funding',\n  5: 'orderbook',\n  6: 'trades'\n};\n\n// Process all items\nconst results = prepareMongoRecords($items(), inputSymbol, nodeMap);\n\n// Return the processed results\nreturn results;"
      },
      "name": "Prepare for MongoDB",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1024,
        384
      ],
      "id": "d7945a4f-b801-4346-bd0e-35d669d77d44"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "pathParams",
              "type": "any"
            },
            {
              "name": "symbol",
              "type": "any"
            },
            {
              "name": "params",
              "type": "any"
            },
            {
              "name": "query",
              "type": "any"
            }
          ]
        }
      },
      "id": "c838700c-dd98-406a-a5e9-ef77eebf187a",
      "typeVersion": 1.1,
      "name": "Start",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        -528,
        528
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Get Current Price": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Candlestick Data": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Prepare for MongoDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Symbol from Message": {
      "main": [
        [
          {
            "node": "Get Current Price",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Candlestick Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Current Funding Rate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Historical Funding Rate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Contract Details",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Trades List",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Order Book Depth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Funding Rate": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get Historical Funding Rate": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Get Contract Details": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Get Trades List": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Book Depth": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Extract Symbol from Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e9a0d7e1-3111-4016-924c-ed6eb807a646",
  "meta": {
    "instanceId": "9984e2e466df2329f1cac74dac5667eec63d2dae2a6167aaec8bc5562b150194"
  },
  "id": "rYB2O6jw5RZWwJCn",
  "tags": [
    {
      "createdAt": "2025-09-26T05:24:50.234Z",
      "updatedAt": "2025-09-26T05:24:50.234Z",
      "id": "OGUR7X5edzpVLq0x",
      "name": "Crypto"
    },
    {
      "createdAt": "2025-09-27T00:40:26.718Z",
      "updatedAt": "2025-09-27T00:40:26.718Z",
      "id": "HcH9JXudWcvbvpHS",
      "name": "Subworkflow"
    }
  ]
}