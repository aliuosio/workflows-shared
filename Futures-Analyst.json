{
  "name": "Futures-Analyst",
  "nodes": [
    {
      "parameters": {
        "includeTime": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Include_Current_Time', ``, 'boolean') }}",
        "outputFieldName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Output_Field_Name', ``, 'string') }}",
        "options": {
          "timezone": "Europe/Berlin"
        }
      },
      "type": "n8n-nodes-base.dateTimeTool",
      "typeVersion": 2,
      "position": [
        -736,
        416
      ],
      "id": "940e72e2-f5be-446f-81e2-d91045c2e385",
      "name": "Date Time"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -608,
        416
      ],
      "id": "2df968c7-d105-4113-b823-35081599d7a2",
      "name": "Think"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -480,
        416
      ],
      "id": "a9b2252b-311c-403f-aabd-0163becd5fc7",
      "name": "Calculator"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSearXng",
      "typeVersion": 1,
      "position": [
        -352,
        416
      ],
      "id": "05d6a7b0-b4cc-4def-8fb6-4a584d7359ec",
      "name": "SearXNG",
      "credentials": {
        "searXngApi": {
          "id": "GdxVcHHsVzCfazYA",
          "name": "SearXNG account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Chat').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an information extraction assistant with access to a **SearxXNG tool node** in n8n. Your task is to identify cryptocurrency symbols and trading pair symbols in the provided text, or just the coin name.\nUse searcth toool to get valid oparings\n\n**Rules:**  \n- Return **ONLY** valid cryptocurrency trading pairs and coin names found in the input.  \n- Normalize all outputs to **UPPERCASE**.  \n- Accept common separators between base and quote: `/`, `-`, `_`, whitespace, or none. Examples: `BTCUSDT`, `BTC/USDT`, `btc usdt`, `btc-usdt`.  \n\nOutput fields:  \n- `\"symbol\"`: concatenation of BASE and QUOTE with **no separator** (e.g., `\"SOLUSDT\"`).  \n- `\"pairing\"`: BASE and QUOTE separated by an **underscore** (e.g., `\"SOL_USDT\"`).  \n- Ensure **USDT is always the quote** at the end of the symbol.  \n- If multiple pairs are found, return an **ARRAY of objects** in the order they appear in the text.  \n- If no valid trading pair is found, return a **single-item array with nulls**:  \n   \n Do NOT include any extra text, explanation, or metadata outside the JSON array."
        }
      },
      "id": "1efa3db1-a8bf-4439-a6ce-9d30e5c508a4",
      "name": "Get Symbol",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1696,
        192
      ],
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"symbol\": \"SOLUSDT\",\n  \"pairing\": \"SOL_USDT\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1424,
        416
      ],
      "id": "3464639d-f804-4867-91dc-729e4cbf9ab8",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "40176463-b9d4-4e43-bff7-0aee95e0beb5",
              "name": "symbol",
              "value": "={{ $json.output.symbol }}",
              "type": "string"
            },
            {
              "id": "942db944-fb54-4f12-94ff-54654af05aef",
              "name": "pairing",
              "value": "={{ $json.output.pairing }}",
              "type": "string"
            },
            {
              "id": "fbc11b8e-c7b8-44d3-9444-285dded03e9e",
              "name": "sessionId",
              "value": "={{ $('Chat').item.json.sessionId }}",
              "type": "string"
            },
            {
              "id": "49350b50-99f8-4f10-87b6-de53f58301fc",
              "name": "chatInput",
              "value": "={{ $('Chat').item.json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1216,
        192
      ],
      "id": "ff2bc40d-4127-4c95-b6e5-eff0e3504c44",
      "name": "Set Vars"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1808,
        416
      ],
      "id": "58a5a178-3e91-4ccf-a525-bededf4ae309",
      "name": "Gemini Flash Lite",
      "credentials": {
        "googlePalmApi": {
          "id": "cd86rb8vIIPgKJnt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# üîß Futures Forecast (MEXC)  \n\nSupports both 4h horizons. Works with `{{ $json.symbol }}`\nAnalyze the provided MEXC market data and the prior agent's signal logic.\n\n---\n\n## üÜì Inputs\n\n- **symbol:** `{{ $json.symbol }}` (example: `SOLUSDT`)  \n- **timeframe:** 4 hours\n- **now:** `{{ $json.now }}` ‚Äî optional timestamp, otherwise fetch time.  \n- **Primary source:** MEXC (ticker, depth, trades, funding, OI). If down, state fallback exchange and mark outputs low confidence.\n\n---\n\n## üîé Required Live Data\n\n1. MEXC: ticker, orderbook depth, trades, 24h stats, funding rate, open interest, liquidations.  \n2. On-chain (if available): active addresses, txs, whale flows.  \n3. Technical indicators: RSI, MACD, EMAs, ATR, VWAP.  \n4. Market microstructure: bid/ask skew, depth imbalance.  \n5. News & social: headlines, Twitter/Reddit sentiment.  \n6. Funding & sentiment: long/short ratio, funding rate trend.  \n\n---\n\n### üß≠ Task ‚Äî produce a complete forecast\n\nGenerate the following labeled sections with concise outputs. Use icons in headings.\n\n### ‚è±Ô∏è Snapshot\n\n- Current price (MEXC) + timestamp (Europe/Berlin CET/CEST).  \n- One-line summary (bullish / bearish / neutral).\n\n### üìà Price Breakpoints\n\n- **Support levels** (nearest ‚Üí further), with reason + confidence.  \n- **Resistance levels** (nearest ‚Üí further), with reason + confidence.\n\n### üß† Market Sentiment (‚ÄúAir‚Äù)\n\n- Short overview of sentiment based on funding, long/short ratio, social/news, whale flows.  \n- Mention abrupt shifts if detected.\n\n### üìä Probability-Based Prognosis\n\n- Probabilities (sum ‚âà 100%) for **Breakout ‚Üë**, **Breakdown ‚Üì**, **Consolidation**.  \n- Rationale tied to indicators.\n\n### üßæ Indicator Analysis\n\nCompact list with value + influence:\n\n- RSI, MACD, EMAs (20/50/200), ATR, VWAP.  \n- Orderbook depth/imbalance.  \n- Funding rate & OI.  \n- On-chain (addresses, txs, whales).  \n- News/social sentiment.\n\n### üìâ/üìà Trading Recommendation\n\n- **Side:** LONG / SHORT / NEUTRAL.  \n- **Entry zone(s):** price + reason.  \n- **Stop-loss:** price/%.  \n- **Take-profit(s):** 1‚Äì3 levels.  \n- Optional: simple position sizing rule.  \nTie each to indicator analysis.\n\n### ‚ö†Ô∏è Risk & Edge Cases\n\n- 2‚Äì3 invalidation scenarios + what to monitor.\n\n### üìä Graphical Representation\n\n- Simple distribution (ASCII/Markdown table) **and** a JSON array `probability_distribution`.  \n- If possible, output price bins ‚Üí probabilities",
        "options": {
          "systemMessage": "# Cryptocurrency Futures Trading Analyst\n\nYou are a highly specialized AI assistant acting as a **Cryptocurrency Futures Trading Analyst**.  \nYour role is to deliver **short-term (24-hour) forecasts** for cryptocurrency futures markets in a **data-driven, objective, and professional** manner.  \n\nYou have access to the following tools and **must use them all whenever relevant** to gather data and perform analysis:  \n\n- `Get_Trades_List`: Get a list of trades.  \n- `Get_Order_Book_Depth`: Get the order book depth.  \n- `Get_Contract_Details`: Get contract details.  \n- `Get_Current_price`: Get the current price of a contract.  \n- `Get_Historical_Funding_Rate`: Get the historical funding rate.  \n- `Get_Funding_Rate`: Get the current funding rate.  \n- `Get_Candlestick_Data`: Get candlestick data.  \n- `searxng-search`: A meta search engine for answering questions about current events.  \n- `calculator`: A simple calculator for mathematical expressions.  \n- `thinking_tool`: A tool for complex reasoning and caching information.  \n- `Date_Time`: Manipulate date and time values.  \n\nNOTE: if you fail to get data from an API endpoint you retry up till 3 times\n\nonly intervals allowed on Get_Candlestick_Data tool node: 1m, 5m, 15m, 30m, 60m, 4h, 1d, 1W, 1M\n\nYour responses must always be:  \n- **Structured** with clearly labeled sections.  \n- **Concise, professional, and actionable**.  \n- Based on the **latest available market data from all tools**.  \n- Include a clear **trading recommendation** (long or short) logically tied to your indicator analysis.  \n\nAlways attempt to **combine insights from all tools** to provide the most accurate and actionable forecast.\n\nuse date & time tool connected to get date and time bfore doing API calss\n\n# DATA CONTEXT:\nThe raw data provided comes directly from the **MEXC Exchange APIs**, specifically the OHLC (Candlestick) endpoint. The fields are mapped to the following database schema for a PostgreSQL table:\n- 'price_time' is the candlestick closing timestamp (TIMESTAMP WITHOUT TIME ZONE).\n- 'open', 'high', 'low', 'close_price' are all **DECIMAL** values.\n- **ENSURE** all price fields in the final JSON are represented as **numbers**, not strings.",
          "returnIntermediateSteps": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -304,
        192
      ],
      "id": "335285e6-da32-4836-b6da-a6ff84627aa6",
      "name": "Analyst",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "toolDescription": "Get Candlestick Data\n\ninterval: 1m, 5m, 15m, 30m, 60m, 4h, 1d, 1W, 1M\nlimit: record count\n\nNOTE:\nUse only these values for interval:\n1m, 5m, 15m, 30m, 60m, 4h, 1d, 1W, 1M",
        "url": "https://api.mexc.com/api/v3/klines",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "interval",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -224,
        416
      ],
      "id": "5c7abf31-e09b-4aab-b16e-5db74cd88435",
      "name": "Get Candlestick Data"
    },
    {
      "parameters": {
        "toolDescription": "Get Funding Rate\n\nNote:\nsymbol is set automatically by n8n node",
        "url": "=https://contract.mexc.com/api/v1/contract/funding_rate/{{ $json.pairing }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -96,
        416
      ],
      "id": "ffc47488-7068-476f-a47a-9619dcd302e1",
      "name": "Get Funding Rate"
    },
    {
      "parameters": {
        "toolDescription": "Get Historical Funding Rate\npass parameters page_num and page_size\nsymbol is automatically set\nNote:\nyou only have to pass page_num and page_size as parameters\nsymbol is set automatically by n8n node",
        "url": "https://contract.mexc.com/api/v1/contract/funding_rate/history",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "page_num",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page_size",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        32,
        416
      ],
      "id": "e28d09e4-4914-4424-9d32-6133bd296a88",
      "name": "Get Historical Funding Rate"
    },
    {
      "parameters": {
        "toolDescription": "Get Current price",
        "url": "https://contract.mexc.com/api/v1/contract/ticker",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.pairing }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        160,
        416
      ],
      "id": "25010b7e-80ea-4d9e-af42-b3e1bfe78fdc",
      "name": "Get Current price"
    },
    {
      "parameters": {
        "toolDescription": "Get Contract Details",
        "url": "https://contract.mexc.com/api/v1/contract/detail",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.pairing }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        288,
        416
      ],
      "id": "08e9eb14-94ab-4d6c-9a6c-261766ab1bf3",
      "name": "Get Contract Details"
    },
    {
      "parameters": {
        "toolDescription": "Get Order Book Depth\nOnly pass limit as parameter\nlimit: stands for the number of records",
        "url": "https://api.mexc.com/api/v3/depth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        416,
        416
      ],
      "id": "9549fe77-858c-4000-90d5-8848d3f60f2a",
      "name": "Get Order Book Depth"
    },
    {
      "parameters": {
        "toolDescription": "Get Trades List\n\nyou only have to pass limit\nsymbol ist set",
        "url": "https://api.mexc.com/api/v3/trades",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        544,
        416
      ],
      "id": "85e83d53-3d17-4396-b5ee-fc695d02de90",
      "name": "Get Trades List"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -736,
        592
      ],
      "id": "36c6a074-13dd-4afd-b429-413f0c05a124",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "gZRvcU8iXT74oZnS",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "codestral-latest",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -992,
        416
      ],
      "id": "2e75747e-01d0-45fd-85b0-6d689cf88c3c",
      "name": "Mistral",
      "credentials": {
        "mistralCloudApi": {
          "id": "vLfmgTQBWBINDOxf",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "trades",
          "mode": "list",
          "cachedResultName": "trades"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "entry_target_min": "={{ $('Get Vars to save').item.json.entry_target_min }}",
            "entry_target_max": "={{ $('Get Vars to save').item.json.entry_target_max }}",
            "llm": "={{ $('Which LLM Question').item.json.chatInput }}",
            "coin": "={{ $('Set Vars').item.json.symbol }}",
            "recommendation_text": "={{ $('Get Vars to save').item.json.recommendation_text }}",
            "signal_side": "={{ $('Get Vars to save').item.json.signal_side }}",
            "stop_loss": "={{ $('Get Vars to save').item.json.stop_loss }}",
            "take_profit_1": "={{ $('Get Vars to save').item.json.take_profit_1 }}",
            "entry_price": "={{ $('Get Vars to save').item.json.entry_price }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "llm",
              "displayName": "llm",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "coin",
              "displayName": "coin",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entry_price",
              "displayName": "entry_price",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "signal_side",
              "displayName": "signal_side",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entry_target_min",
              "displayName": "entry_target_min",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "entry_target_max",
              "displayName": "entry_target_max",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "stop_loss",
              "displayName": "stop_loss",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "take_profit_1",
              "displayName": "take_profit_1",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "recommendation_text",
              "displayName": "recommendation_text",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1424,
        192
      ],
      "id": "ba62bfa4-fdd3-44af-9001-936ab9b0d818",
      "name": "Save Trade",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "message": "={{ $('Analyst').item.json.output }}",
        "waitUserReply": false,
        "options": {
          "memoryConnection": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        752,
        0
      ],
      "id": "f68ab664-454d-44c3-8bd6-97cb9b99c1ab",
      "name": "Respond to Chat",
      "notesInFlow": false
    },
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -2032,
        192
      ],
      "id": "7065f56b-b9c9-4031-88b0-bc0682c5f015",
      "name": "Chat",
      "webhookId": "81de5df4-57cb-4b2c-bdbc-5855db4fafec"
    },
    {
      "parameters": {
        "message": "Which LLM was used for this response?",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        976,
        192
      ],
      "id": "9fd2dd17-3b9e-4be8-9721-b817ab80ca47",
      "name": "Which LLM Question"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -544,
        576
      ],
      "id": "bb9536e6-0eac-4f62-af05-584921280360",
      "name": "Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "cd86rb8vIIPgKJnt",
          "name": "Google Gemini(PaLM) Api account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSearXng",
      "typeVersion": 1,
      "position": [
        -1552,
        416
      ],
      "id": "5ded2357-05c1-4a08-8626-67509d3a6cc9",
      "name": "SearXNG1",
      "credentials": {
        "searXngApi": {
          "id": "GdxVcHHsVzCfazYA",
          "name": "SearXNG account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Create the trades table\nCREATE TABLE IF NOT EXISTS public.trades (\n    id INT GENERATED ALWAYS AS IDENTITY NOT NULL,\n    \n    llm VARCHAR NOT NULL,\n    coin VARCHAR NOT NULL,\n    entry_price DECIMAL NOT NULL,\n    \n    signal_side VARCHAR NOT NULL, -- LONG, SHORT, or NEUTRAL\n    entry_target_min DECIMAL NULL,\n    entry_target_max DECIMAL NULL,\n    stop_loss DECIMAL NULL,\n    take_profit_1 DECIMAL NULL, -- We only track TP1 for backtesting simplicity\n    \n    recommendation_text TEXT NOT NULL, -- The original text block\n    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,\n    \n    CONSTRAINT trades_pk PRIMARY KEY (id),\n    CONSTRAINT chk_signal_side CHECK (signal_side IN ('LONG', 'SHORT', 'NEUTRAL'))\n);\n\n-- Create index for trades\nCREATE INDEX IF NOT EXISTS idx_trades_coin_time ON public.trades (coin, created_at);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        192
      ],
      "id": "c08cb58d-6b7b-4900-8667-8cc2571cb9bf",
      "name": "table trade and market-price creation",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst inputJson = items[0].json;\n\n// 1. ROBUST INPUT RETRIEVAL AND CORRECTED recommendation_text EXTRACTION\n// Use the original text for parsing all values\nconst analystOutputFullText = inputJson.recommendation_text || inputJson.output || ''; \n\n// Corrected regex to find text between the specified headers\n// It looks for \"### üìâ/üìà Trading Recommendation\" and captures everything non-greedily ([\\s\\S]*?) \n// until it hits \"### ‚ö†Ô∏è Risk & Edge Cases\" or the end of the string ($).\nconst recommendationMatch = analystOutputFullText.match(/### üìâ\\/üìà Trading Recommendation([\\s\\S]*?)(?=### ‚ö†Ô∏è Risk & Edge Cases|$)/i);\nconst recommendation_text = recommendationMatch ? recommendationMatch[1].trim() : analystOutputFullText;\n\n\n// *** NOTE: The input text does NOT contain a 'Current Price', so entry_price will remain 0. ***\n// We still use the FULL text for all parsing.\nconst entryPriceMatch = analystOutputFullText.match(/\\*\\*Current Price \\(MEXC\\):\\*\\*\\s*([\\d\\.]+)/);\nconst entry_price = entryPriceMatch ? parseFloat(entryPriceMatch[1]) : 0;\n\n// 2. CORRECTED REGEX PATTERNS FOR PRICE EXTRACTION\n\n// Signal Side: Matches \"Side:** NEUTRAL to SHORT bias\" or \"Side:** LONG bias\"\nconst sideMatch = /Side:\\*\\*\\s*(.+?)\\s*bias/.exec(analystOutputFullText) || /Side:\\*\\*\\s*(LONG|SHORT|NEUTRAL)/.exec(analystOutputFullText);\n\nlet signal_side = 'NEUTRAL';\nif (sideMatch) {\n    const sideText = sideMatch[1].toUpperCase();\n    if (sideText.includes('SHORT')) {\n        signal_side = 'SHORT';\n    } else if (sideText.includes('LONG')) {\n        signal_side = 'LONG';\n    } else if (sideText.includes('NEUTRAL')) {\n        signal_side = 'NEUTRAL';\n    }\n} else {\n    signal_side = 'UNKNOWN';\n}\n\n// Entry Zone: Matches \"Entry zone:** Short near 233-235 USDT\"\nconst entryZoneMatch = /Entry zone:\\*\\*\\s*(?:Short|Long)\\s*near\\s*([\\d\\.]+)-([\\d\\.]+)\\s*USDT/.exec(analystOutputFullText);\nconst entry_target_min = entryZoneMatch ? parseFloat(entryZoneMatch[1]) : 0;\nconst entry_target_max = entryZoneMatch ? parseFloat(entryZoneMatch[2]) : 0;\n\n// Stop-Loss: Matches \"Stop-loss:** Above 238 USDT\"\nconst stopLossMatch = /Stop-loss:\\*\\*\\s*(?:Above|Below)\\s*([\\d\\.]+)\\s*USDT/.exec(analystOutputFullText);\nconst stop_loss = stopLossMatch ? parseFloat(stopLossMatch[1]) : 0;\n\n// Take-Profit 1: Matches \"1. 228.5 USDT\"\nconst takeProfitMatch = /1\\.\\s*([\\d\\.]+)\\s*USDT/.exec(analystOutputFullText);\nconst take_profit_1 = takeProfitMatch ? parseFloat(takeProfitMatch[1]) : 0;\n\n\n// 3. RETURN THE RESULT\nreturn [{\n¬† json: {\n¬† ¬† recommendation_text,\n¬† ¬† entry_price, \n¬† ¬† signal_side, \n¬† ¬† entry_target_min, \n¬† ¬† entry_target_max, \n¬† ¬† stop_loss, \n¬† ¬† take_profit_1\n¬† }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        752,
        192
      ],
      "id": "74401b78-c82d-49c6-8c7c-764c0ec968df",
      "name": "Get Vars to save"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS public.market_prices (\n    id INT GENERATED ALWAYS AS IDENTITY NOT NULL,\n    coin VARCHAR NOT NULL,\n    open DECIMAL NOT NULL,\n    high DECIMAL NOT NULL, \n    low DECIMAL NOT NULL,  \n    close_price DECIMAL NOT NULL,\n    period VARCHAR NOT NULL,\n    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,\n    \n    CONSTRAINT market_prices_pk PRIMARY KEY (id),\n    CONSTRAINT market_prices_unq UNIQUE (coin, created_at)\n);\n\nCREATE INDEX IF NOT EXISTS idx_prices_coin_time ON public.market_prices (coin, created_at);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        752,
        384
      ],
      "id": "02fad078-8315-4420-907e-39251a6e602a",
      "name": "table market_prices create",
      "retryOnFail": true,
      "alwaysOutputData": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "market_prices",
          "mode": "list",
          "cachedResultName": "market_prices"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "open": "={{ $json[1] }}",
            "high": "={{ $json[2] }}",
            "low": "={{ $json[3] }}",
            "close_price": "={{ $json[4] }}",
            "coin": "={{ $('Set Vars').item.json.symbol }}",
            "period": "=15m"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "coin",
              "displayName": "coin",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "open",
              "displayName": "open",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "high",
              "displayName": "high",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "low",
              "displayName": "low",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "close_price",
              "displayName": "close_price",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "period",
              "displayName": "period",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1200,
        384
      ],
      "id": "467e5b53-0627-4ce2-8410-d9a0199c2780",
      "name": "Insert rows in a table",
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.mexc.com/api/v3/klines",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "SOLUSDT"
            },
            {
              "name": "interval",
              "value": "15m"
            },
            {
              "name": "limit",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        976,
        384
      ],
      "id": "d9b77519-4044-4247-b54f-d6e37fca0a85",
      "name": "Get Candlestick Data1",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "tableName": "Get_Symbol_Chat_History",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -1680,
        416
      ],
      "id": "5c17f7d9-a977-44c1-843f-af9b4603467c",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "tableName": "Analyst_Chat_History",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        -864,
        416
      ],
      "id": "ed83ceba-7913-4019-9f6b-33988e33f66a",
      "name": "Postgres Chat Memory1",
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Date Time": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "SearXNG": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get Symbol": {
      "main": [
        [
          {
            "node": "Set Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Vars": {
      "main": [
        [
          {
            "node": "Analyst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Flash Lite": {
      "ai_languageModel": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Candlestick Data": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Funding Rate": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Historical Funding Rate": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Current price": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Contract Details": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Book Depth": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Trades List": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        []
      ]
    },
    "Mistral": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Analyst": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Vars to save",
            "type": "main",
            "index": 0
          },
          {
            "node": "table market_prices create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat": {
      "main": [
        []
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "Get Symbol",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Which LLM Question": {
      "main": [
        [
          {
            "node": "table trade and market-price creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini": {
      "ai_languageModel": [
        []
      ]
    },
    "Save Trade": {
      "main": [
        []
      ]
    },
    "SearXNG1": {
      "ai_tool": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "table trade and market-price creation": {
      "main": [
        [
          {
            "node": "Save Trade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Vars to save": {
      "main": [
        [
          {
            "node": "Which LLM Question",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "table market_prices create": {
      "main": [
        [
          {
            "node": "Get Candlestick Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Candlestick Data1": {
      "main": [
        [
          {
            "node": "Insert rows in a table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "Analyst",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "88e07d4c-2413-4fed-8481-b9f9e34c26da",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9984e2e466df2329f1cac74dac5667eec63d2dae2a6167aaec8bc5562b150194"
  },
  "id": "d3MJ2uLGykV0GQyS",
  "tags": [
    {
      "createdAt": "2025-09-26T05:24:50.234Z",
      "updatedAt": "2025-09-26T05:24:50.234Z",
      "id": "OGUR7X5edzpVLq0x",
      "name": "Crypto"
    }
  ]
}