{
  "name": "Futures Analyst",
  "nodes": [
    {
      "parameters": {
        "includeTime": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Include_Current_Time', ``, 'boolean') }}",
        "outputFieldName": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Output_Field_Name', ``, 'string') }}",
        "options": {
          "timezone": "Europe/Berlin"
        }
      },
      "type": "n8n-nodes-base.dateTimeTool",
      "typeVersion": 2,
      "position": [
        -656,
        448
      ],
      "id": "940e72e2-f5be-446f-81e2-d91045c2e385",
      "name": "Date Time"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        -528,
        448
      ],
      "id": "2df968c7-d105-4113-b823-35081599d7a2",
      "name": "Think"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -400,
        448
      ],
      "id": "a9b2252b-311c-403f-aabd-0163becd5fc7",
      "name": "Calculator"
    },
    {
      "parameters": {
        "description": "TechnicalIndicators: Compute MACD, RSI, and EMA from candlestick data.\nTest with at least 20-30 candles to see RSI values populate.",
        "jsCode": "// ----- 1. Parse input -----\nconst data = {{ $fromAI('query') }}\nconst candles = data?.candles || [];\n\nif (!Array.isArray(candles) || candles.length === 0) {\n  return JSON.stringify({ error: \"No candle data provided\" });\n}\n\n// ----- 2. Helper Functions -----\nfunction calculateEMA(data, period) {\n  const k = 2 / (period + 1);\n  let emaArray = [];\n  let emaPrev;\n\n  data.forEach((price, i) => {\n    if (i === 0) {\n      emaPrev = price;\n      emaArray.push(emaPrev);\n    } else {\n      let ema = price * k + emaPrev * (1 - k);\n      emaArray.push(ema);\n      emaPrev = ema;\n    }\n  });\n\n  return emaArray;\n}\n\nfunction calculateRSI(data, period) {\n  let gains = 0;\n  let losses = 0;\n  let rsiArray = [];\n\n  for (let i = 1; i < data.length; i++) {\n    const diff = data[i] - data[i - 1];\n    if (diff >= 0) {\n      gains += diff;\n    } else {\n      losses -= diff;\n    }\n\n    if (i === period) {\n      const avgGain = gains / period;\n      const avgLoss = losses / period;\n      let rs = avgGain / avgLoss;\n      let rsi = 100 - 100 / (1 + rs);\n      rsiArray[period] = rsi;\n\n      let prevAvgGain = avgGain;\n      let prevAvgLoss = avgLoss;\n\n      for (let j = period + 1; j < data.length; j++) {\n        const delta = data[j] - data[j - 1];\n        let gain = delta > 0 ? delta : 0;\n        let loss = delta < 0 ? -delta : 0;\n        prevAvgGain = (prevAvgGain * (period - 1) + gain) / period;\n        prevAvgLoss = (prevAvgLoss * (period - 1) + loss) / period;\n        rs = prevAvgGain / prevAvgLoss;\n        rsi = 100 - 100 / (1 + rs);\n        rsiArray[j] = rsi;\n      }\n      break;\n    }\n  }\n\n  return rsiArray;\n}\n\n// ----- 3. Extract close prices -----\nconst closePrices = candles.map(c => parseFloat(c.close));\n\n// ----- 4. Calculate indicators -----\nconst ema12 = calculateEMA(closePrices, 12);\nconst ema26 = calculateEMA(closePrices, 26);\nconst macd = ema12.map((val, i) => val - (ema26[i] || 0));\nconst macdSignal = calculateEMA(macd.filter(v => v !== undefined), 9);\nconst rsi = calculateRSI(closePrices, 14);\n\n// ----- 5. Compose output -----\nconst output = candles.map((c, i) => ({\n  timestamp: c.timestamp,\n  close: parseFloat(c.close),\n  ema12: ema12[i] || null,\n  ema26: ema26[i] || null,\n  macd: macd[i] || null,\n  macdSignal: macdSignal[i - (macd.length - macdSignal.length)] || null,\n  rsi: rsi[i] || null\n}));\n\n// ----- 6. Return as string for AI Agent -----\nreturn JSON.stringify(output);\n",
        "specifyInputSchema": true,
        "jsonSchemaExample": "{\n    \"candles\": [\n      { \"timestamp\": 1696118400000, \"close\": \"153.25\" },\n      { \"timestamp\": 1696118460000, \"close\": \"154.10\" }\n    ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.2,
      "position": [
        -1696,
        968
      ],
      "id": "07d428a0-2388-41aa-a166-eb764345a978",
      "name": "TechnicalIndicators"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.toolSearXng",
      "typeVersion": 1,
      "position": [
        -272,
        448
      ],
      "id": "05d6a7b0-b4cc-4def-8fb6-4a584d7359ec",
      "name": "SearXNG",
      "credentials": {
        "searXngApi": {
          "id": "GdxVcHHsVzCfazYA",
          "name": "SearXNG account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Chat').item.json.chatInput }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an information extraction assistant.\nYour job is to identify cryptocurrency coin names and their trading pair symbols from a given text.\nTHAT IS YOUR ONLY JOB\n\nRules:\nAlways return structured JSON.\nJSON must contain both:\nsymbol (e.g., \"SOLUSDT\")\npairing (e.g., \"SOL_USDT\")"
        }
      },
      "id": "1efa3db1-a8bf-4439-a6ce-9d30e5c508a4",
      "name": "Get Symbol",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1416,
        224
      ]
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"symbol\": \"SOLUSDT\",\n  \"pairing\": \"SOL_USDT\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -1216,
        448
      ],
      "id": "3464639d-f804-4867-91dc-729e4cbf9ab8",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "40176463-b9d4-4e43-bff7-0aee95e0beb5",
              "name": "symbol",
              "value": "={{ $json.output.symbol }}",
              "type": "string"
            },
            {
              "id": "942db944-fb54-4f12-94ff-54654af05aef",
              "name": "pairing",
              "value": "={{ $json.output.pairing }}",
              "type": "string"
            },
            {
              "id": "fbc11b8e-c7b8-44d3-9444-285dded03e9e",
              "name": "sessionId",
              "value": "={{ $('Chat').item.json.sessionId }}",
              "type": "string"
            },
            {
              "id": "49350b50-99f8-4f10-87b6-de53f58301fc",
              "name": "chatInput",
              "value": "={{ $('Chat').item.json.chatInput }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1008,
        224
      ],
      "id": "ff2bc40d-4127-4c95-b6e5-eff0e3504c44",
      "name": "Set Vars"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-pro",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -784,
        448
      ],
      "id": "bb9536e6-0eac-4f62-af05-584921280360",
      "name": "Gemini Pro",
      "credentials": {
        "googlePalmApi": {
          "id": "cd86rb8vIIPgKJnt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1472,
        448
      ],
      "id": "58a5a178-3e91-4ccf-a525-bededf4ae309",
      "name": "Gemini Flash Lite",
      "credentials": {
        "googlePalmApi": {
          "id": "cd86rb8vIIPgKJnt",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=# üîß Futures Forecast (MEXC)  \n\nSupports both 4h and 24h horizons. Works with `{{ $json.symbol }}`\n\n---\n\n## üÜì Inputs\n\n- **symbol:** `{{ $json.symbol }}` (example: `SOLUSDT`)  \n- **timeframe:** `\"24h\"`\n- **now:** `{{ $json.now }}` ‚Äî optional timestamp, otherwise fetch time.  \n- **Primary source:** MEXC (ticker, depth, trades, funding, OI). If down, state fallback exchange and mark outputs low confidence.\n\n---\n\n## üîé Required Live Data\n\n1. MEXC: ticker, orderbook depth, trades, 24h stats, funding rate, open interest, liquidations.  \n2. On-chain (if available): active addresses, txs, whale flows.  \n3. Technical indicators: RSI, MACD, EMAs, ATR, VWAP.  \n4. Market microstructure: bid/ask skew, depth imbalance.  \n5. News & social: headlines, Twitter/Reddit sentiment.  \n6. Funding & sentiment: long/short ratio, funding rate trend.  \n\n---\n\n### üß≠ Task ‚Äî produce a complete forecast\n\nGenerate the following labeled sections with concise outputs. Use icons in headings.\n\n### ‚è±Ô∏è Snapshot\n\n- Current price (MEXC) + timestamp (Europe/Berlin CET/CEST).  \n- One-line summary (bullish / bearish / neutral).\n\n### üìà Price Breakpoints\n\n- **Support levels** (nearest ‚Üí further), with reason + confidence.  \n- **Resistance levels** (nearest ‚Üí further), with reason + confidence.\n\n### üß† Market Sentiment (‚ÄúAir‚Äù)\n\n- Short overview of sentiment based on funding, long/short ratio, social/news, whale flows.  \n- Mention abrupt shifts if detected.\n\n### üìä Probability-Based Prognosis\n\n- Probabilities (sum ‚âà 100%) for **Breakout ‚Üë**, **Breakdown ‚Üì**, **Consolidation**.  \n- Rationale tied to indicators.\n\n### üßæ Indicator Analysis\n\nCompact list with value + influence:\n\n- RSI, MACD, EMAs (20/50/200), ATR, VWAP.  \n- Orderbook depth/imbalance.  \n- Funding rate & OI.  \n- On-chain (addresses, txs, whales).  \n- News/social sentiment.\n\n### üìâ/üìà Trading Recommendation\n\n- **Side:** LONG / SHORT / NEUTRAL.  \n- **Entry zone(s):** price + reason.  \n- **Stop-loss:** price/%.  \n- **Take-profit(s):** 1‚Äì3 levels.  \n- Optional: simple position sizing rule.  \nTie each to indicator analysis.\n\n### ‚ö†Ô∏è Risk & Edge Cases\n\n- 2‚Äì3 invalidation scenarios + what to monitor.\n\n### üìä Graphical Representation\n\n- Simple distribution (ASCII/Markdown table) **and** a JSON array `probability_distribution`.  \n- If possible, output price bins ‚Üí probabilities",
        "options": {
          "systemMessage": "# Cryptocurrency Futures Trading Analyst\n\nYou are a highly specialized AI assistant acting as a **Cryptocurrency Futures Trading Analyst**.  \nYour role is to deliver **short-term (24-hour) forecasts** for cryptocurrency futures markets in a **data-driven, objective, and professional** manner.  \n\nYou have access to the following tools and **must use them all whenever relevant** to gather data and perform analysis:  \n\n- `Get_Trades_List`: Get a list of trades.  \n- `Get_Order_Book_Depth`: Get the order book depth.  \n- `Get_Contract_Details`: Get contract details.  \n- `Get_Current_price`: Get the current price of a contract.  \n- `Get_Historical_Funding_Rate`: Get the historical funding rate.  \n- `Get_Funding_Rate`: Get the current funding rate.  \n- `Get_Candlestick_Data`: Get candlestick data.  \n- `searxng-search`: A meta search engine for answering questions about current events.  \n- `calculator`: A simple calculator for mathematical expressions.  \n- `thinking_tool`: A tool for complex reasoning and caching information.  \n- `Date_Time`: Manipulate date and time values.  \n\nNOTE: if you fail to get data from an API endpoint you retry up till 3 times\n\nYour responses must always be:  \n\n- **Structured** with clearly labeled sections.  \n- **Concise, professional, and actionable**.  \n- Based on the **latest available market data from all tools**.  \n- Include a clear **trading recommendation** (long or short) logically tied to your indicator analysis.  \n\nAlways attempt to **combine insights from all tools** to provide the most accurate and actionable forecast. ",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -152,
        224
      ],
      "id": "335285e6-da32-4836-b6da-a6ff84627aa6",
      "name": "Analyst",
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "toolDescription": "Get Candlestick Data\n\nINSTEAD of 1h use 60m\n\ninterval: 1m, 5m, 15m, 30m, 60m, 4h, 1d, 1W, 1M\nlimit: record count\n\nNOTE:\nUse only these values for interval:\n1m, 5m, 15m, 30m, 60m, 4h, 1d, 1W, 1M",
        "url": "https://api.mexc.com/api/v3/klines",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "interval",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -144,
        448
      ],
      "id": "5c7abf31-e09b-4aab-b16e-5db74cd88435",
      "name": "Get Candlestick Data"
    },
    {
      "parameters": {
        "toolDescription": "Get Funding Rate\n\nNote:\nsymbol is set automatically by n8n node",
        "url": "=https://contract.mexc.com/api/v1/contract/funding_rate/{{ $json.pairing }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -16,
        448
      ],
      "id": "ffc47488-7068-476f-a47a-9619dcd302e1",
      "name": "Get Funding Rate"
    },
    {
      "parameters": {
        "toolDescription": "Get Historical Funding Rate\npass parameters page_num and page_size\nsymbol is automatically set\nNote:\nyou only have to pass page_num and page_size as parameters\nsymbol is set automatically by n8n node",
        "url": "https://contract.mexc.com/api/v1/contract/funding_rate/history",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "page_num",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            },
            {
              "name": "page_size",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        112,
        448
      ],
      "id": "e28d09e4-4914-4424-9d32-6133bd296a88",
      "name": "Get Historical Funding Rate"
    },
    {
      "parameters": {
        "toolDescription": "Get Current price",
        "url": "https://api.mexc.com/api/v3/ticker/price",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        240,
        448
      ],
      "id": "25010b7e-80ea-4d9e-af42-b3e1bfe78fdc",
      "name": "Get Current price"
    },
    {
      "parameters": {
        "toolDescription": "Get Contract Details",
        "url": "https://contract.mexc.com/api/v1/contract/detail",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.pairing }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        368,
        448
      ],
      "id": "08e9eb14-94ab-4d6c-9a6c-261766ab1bf3",
      "name": "Get Contract Details"
    },
    {
      "parameters": {
        "toolDescription": "Get Order Book Depth\nOnly pass limit as parameter\nlimit: stands for the number of records",
        "url": "https://api.mexc.com/api/v3/depth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        496,
        448
      ],
      "id": "9549fe77-858c-4000-90d5-8848d3f60f2a",
      "name": "Get Order Book Depth"
    },
    {
      "parameters": {
        "toolDescription": "Get Trades List\n\nyou only have to pass limit\nsymbol ist set",
        "url": "https://api.mexc.com/api/v3/trades",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "symbol",
              "value": "={{ $json.symbol }}"
            },
            {
              "name": "limit",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', ``, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        624,
        448
      ],
      "id": "85e83d53-3d17-4396-b5ee-fc695d02de90",
      "name": "Get Trades List"
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "id": "b8dbaab2-4906-4006-9ba3-4d4cccfce11c",
      "name": "Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1344,
        448
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1696,
        552
      ],
      "id": "36c6a074-13dd-4afd-b429-413f0c05a124",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "gZRvcU8iXT74oZnS",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": "codestral-latest",
        "options": {
          "temperature": 0.2
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        -1696,
        760
      ],
      "id": "2e75747e-01d0-45fd-85b0-6d689cf88c3c",
      "name": "Mistral",
      "credentials": {
        "mistralCloudApi": {
          "id": "vLfmgTQBWBINDOxf",
          "name": "Mistral Cloud account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS public.trades (\n\tid int GENERATED ALWAYS AS IDENTITY NOT NULL,\n\tprice decimal NOT NULL,\n\trecommendation text NOT NULL,\n\tcreated_at timestamp DEFAULT now() NOT NULL,\n\tCONSTRAINT trades_pk PRIMARY KEY (id)\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1056,
        320
      ],
      "id": "c08cb58d-6b7b-4900-8667-8cc2571cb9bf",
      "name": "Table Trades Creation",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "trades",
          "mode": "list",
          "cachedResultName": "trades"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "price": "={{ $('Get Price And Recommendation').item.json.price }}",
            "recommendation": "={{ $('Get Price And Recommendation').item.json.recommendation }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "price",
              "displayName": "price",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "recommendation",
              "displayName": "recommendation",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1280,
        320
      ],
      "id": "ba62bfa4-fdd3-44af-9001-936ab9b0d818",
      "name": "Save Trade",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "postgres": {
          "id": "ofiKMFwnVNzbmUyB",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "message": "={{ $json.output }}",
        "waitUserReply": false,
        "options": {
          "memoryConnection": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chat",
      "typeVersion": 1,
      "position": [
        832,
        128
      ],
      "id": "f68ab664-454d-44c3-8bd6-97cb9b99c1ab",
      "name": "Respond to Chat",
      "notesInFlow": false
    },
    {
      "parameters": {
        "jsCode": "// Input text from previous node\nconst forecastText = $input.first().json.output;\n\n// Extract current price\nconst priceMatch = forecastText.match(/\\*\\*Current Price \\(MEXC\\):\\*\\*\\s*(\\d+(\\.\\d+)?)/i);\nconst price = priceMatch ? parseFloat(priceMatch[1]) : null;\n\n// Extract Trading Recommendation block\nconst tradingRecMatch = forecastText.match(/Trading Recommendation([\\s\\S]*?)‚ö†Ô∏è Risk & Edge Cases/);\nconst recommendation = tradingRecMatch ? tradingRecMatch[1].trim() : null;\n\n// Save extracted data to DB by returning it as separate fields (for a DB node to pick up)\nreturn  [\n  {\n    price,\n    recommendation\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        320
      ],
      "id": "cf1747ac-8212-44c4-9a17-c891bf00e945",
      "name": "Get Price And Recommendation"
    },
    {
      "parameters": {
        "options": {
          "responseMode": "responseNodes"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -1696,
        224
      ],
      "id": "7065f56b-b9c9-4031-88b0-bc0682c5f015",
      "name": "Chat",
      "webhookId": "81de5df4-57cb-4b2c-bdbc-5855db4fafec"
    }
  ],
  "pinData": {},
  "connections": {
    "Date Time": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calculator": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "TechnicalIndicators": {
      "ai_tool": [
        []
      ]
    },
    "SearXNG": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get Symbol": {
      "main": [
        [
          {
            "node": "Set Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Vars": {
      "main": [
        [
          {
            "node": "Analyst",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Flash Lite": {
      "ai_languageModel": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Pro": {
      "ai_languageModel": [
        [
          {
            "node": "Analyst",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get Candlestick Data": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Funding Rate": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Historical Funding Rate": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Current price": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Contract Details": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Order Book Depth": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get Trades List": {
      "ai_tool": [
        [
          {
            "node": "Analyst",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Get Symbol",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "ai_languageModel": [
        []
      ]
    },
    "Mistral": {
      "ai_languageModel": [
        []
      ]
    },
    "Analyst": {
      "main": [
        [
          {
            "node": "Respond to Chat",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Price And Recommendation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Table Trades Creation": {
      "main": [
        [
          {
            "node": "Save Trade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Chat": {
      "main": [
        []
      ]
    },
    "Get Price And Recommendation": {
      "main": [
        [
          {
            "node": "Table Trades Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chat": {
      "main": [
        [
          {
            "node": "Get Symbol",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dbbe4c96-30b4-4a1e-9b74-5081e971a308",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9984e2e466df2329f1cac74dac5667eec63d2dae2a6167aaec8bc5562b150194"
  },
  "id": "d3MJ2uLGykV0GQyS",
  "tags": [
    {
      "createdAt": "2025-09-26T05:24:50.234Z",
      "updatedAt": "2025-09-26T05:24:50.234Z",
      "id": "OGUR7X5edzpVLq0x",
      "name": "Crypto"
    }
  ]
}